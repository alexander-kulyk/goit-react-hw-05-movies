{"version":3,"file":"static/js/219.813fdbe1.chunk.js","mappings":"gRAEaA,EAAeC,EAAAA,GAAAA,IAAH,8DAKZC,EAAYD,EAAAA,GAAAA,EAAH,4BAGTE,EAAaF,EAAAA,GAAAA,GAAH,kHAMVG,EAAaH,EAAAA,GAAAA,GAAH,kH,2BC2CvB,EAlDa,WAET,IAAOI,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAmBA,IAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMN,GAAN,mGAIQO,EAAAA,EAAAA,IAAWP,GAJnB,OAILQ,EAJK,OAKLC,EAAOD,EAAKC,KAAKN,KACvBC,EAAQK,GANG,yGAAH,sDAabH,EAAQN,EACT,GAAE,CAACA,IAES,OAATG,EAIJ,OAEI,SAACL,EAAD,UACKK,EAAKO,OAAS,EACXP,EAAKQ,KAAI,YAAyC,IAE9CC,EAFOC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAO/B,OAHOH,EADa,OAAjBG,EACS,yCAAsCA,GAClCC,GAET,UAACjB,EAAD,YACJ,SAACJ,EAAD,CAAcsB,IAAKL,EAAOM,IAAKJ,KAC/B,SAACjB,EAAD,UAAYiB,MAFSD,EAGT,KACd,SAAC,KAAD,uBAKf,C,uLCpDYM,EAAcvB,EAAAA,GAAAA,GAAH,4BAIXwB,EAAexB,EAAAA,GAAAA,GAAH,4BAIZyB,EAAQzB,EAAAA,GAAAA,GAAH,8BAGL0B,EAAO1B,EAAAA,GAAAA,EAAH,8BAGJ2B,EAAU3B,EAAAA,GAAAA,EAAH,iE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Reviews/Reviews.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorProfile = styled.img`\n    width: 250px;\n    height: auto;\n`;\n\nexport const ActorName = styled.p`\n  \n`;\nexport const ListActors = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n`;\nexport const ItemActors = styled.li`\n\n  margin: 15px;\n  list-style: none;\n  box-shadow: 0px 10px 20px 5px rgba(0,0,0,0.3);\n`;\n\n\n\n\n\n\n","import { getCredits } from \"API/fetchMovies\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { ActorName, ActorProfile, ItemActors, ListActors } from \"./Cast.styled\";\nimport picture from '../../picture/no-image.jpg';\nimport { Message } from \"components/Reviews/Reviews.styled\";\n\n\n\nconst Cast = () =>{\n\n    const {movieId} = useParams();\n    const [cast, setCast] = useState(null);\n\n    useEffect(() => {\n      const getCast = async movieId =>{\n\n        try {\n            \n           const resp = await getCredits(movieId);\n           const data = resp.data.cast;\n           setCast(data);\n\n        } catch (error) {\n            \n        }\n\n      }\n      getCast(movieId)\n    }, [movieId])\n    \n    if (cast === null) {\n      return;\n    }\n\n    return(\n\n        <ListActors>\n            {cast.length > 0 \n              ? cast.map(({id, original_name, profile_path }) => {\n              \n                let image\n                  profile_path !== null\n                    ? image = `https://image.tmdb.org/t/p/w500${ profile_path }`\n                    : image  = picture;\n\n               return <ItemActors key={id}>\n                  <ActorProfile src={image} alt={original_name}/>\n                  <ActorName>{original_name}</ActorName>\n                </ItemActors>})\n              : <Message>No Cast</Message>\n            }\n        </ListActors>\n\n    )\n}\n\n\n\nexport default Cast;","\nimport styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  \n`;\n\nexport const ReviewsItems = styled.li`\n  \n`;\n\nexport const Title = styled.h2`\n    \n`;\nexport const Text = styled.p`\n    \n`;\nexport const Message = styled.p`\n    color: red;\n    text-align: center;\n`;\n\n\n\n\n\n\n\n"],"names":["ActorProfile","styled","ActorName","ListActors","ItemActors","movieId","useParams","useState","cast","setCast","useEffect","getCast","getCredits","resp","data","length","map","image","id","original_name","profile_path","picture","src","alt","ReviewsList","ReviewsItems","Title","Text","Message"],"sourceRoot":""}